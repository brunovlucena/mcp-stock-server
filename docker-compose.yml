# üìà MCP Stock Server - Docker Compose
# Configura√ß√£o para desenvolvimento e produ√ß√£o

version: '3.8'

services:
  mcp-stock-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mcp-stock-server
    restart: unless-stopped
    environment:
      # Configura√ß√µes do MCP Server
      - NODE_ENV=production
      - MCP_SERVER_NAME=stock-server
      - MCP_SERVER_VERSION=1.0.0
      - PORT=3000
      - LOG_LEVEL=info
      
      # APIs de dados financeiros (opcional)
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY:-}
      - YAHOO_FINANCE_API_KEY=${YAHOO_FINANCE_API_KEY:-}
    
    # Volumes para persist√™ncia (opcional)
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    
    # Portas (opcional, para debug)
    ports:
      - "3000:3000"
    
    # Configura√ß√µes de rede
    networks:
      - mcp-network
    
    # Configura√ß√µes de recursos
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servi√ßo de desenvolvimento (opcional)
  mcp-stock-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: mcp-stock-dev
    restart: "no"
    environment:
      - NODE_ENV=development
      - MCP_SERVER_NAME=stock-server-dev
      - MCP_SERVER_VERSION=1.0.0-dev
      - PORT=3000
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    networks:
      - mcp-network
    profiles:
      - dev

# Redes
networks:
  mcp-network:
    driver: bridge
    name: mcp-stock-network

# Volumes
volumes:
  mcp-stock-logs:
    driver: local
  mcp-stock-data:
    driver: local
