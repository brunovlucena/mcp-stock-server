# 📈 MCP Stock Server - GitHub Container Registry
# Workflow para build e push para GHCR

name: Container Registry

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: brunovlucena/mcp-stock-server

jobs:
  # 🔍 Validação
  validate:
    name: "🔍 Validar configuração"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validar Taskfile
        run: |
          if ! command -v task &> /dev/null; then
            echo "Instalando Task..."
            sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          fi
          task registry:validate

  # 🐳 Build e Push
  build-and-push:
    name: "🐳 Build e Push"
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🧪 Teste da imagem
  test-image:
    name: "🧪 Testar imagem"
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Testar imagem
        run: |
          docker run --rm \
            --name mcp-stock-test \
            -e NODE_ENV=test \
            -e MCP_SERVER_NAME=stock-server-test \
            -e MCP_SERVER_VERSION=1.0.0-test \
            -e PORT=3000 \
            -e LOG_LEVEL=debug \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            node -e "console.log('MCP Stock Server test successful')"

  # 🔒 Security scan
  security:
    name: "🔒 Security scan"
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 📊 Análise de código
  code-analysis:
    name: "📊 Análise de código"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Executar análise de código
        run: |
          npm run lint
          npm audit --audit-level moderate

  # 🏷️ Release
  release:
    name: "🏷️ Criar release"
    runs-on: ubuntu-latest
    needs: [build-and-push, test-image, security]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Build
        run: npm run build

      - name: Gerar changelog
        run: |
          echo "## Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### $(git describe --tags --abbrev=0)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)^..HEAD >> CHANGELOG.md

      - name: Criar release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
